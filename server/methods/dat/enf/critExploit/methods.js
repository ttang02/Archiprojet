//Critere Exploi

Meteor.methods({
   'addCritExploiEmpty': function(){
        console.log("The method 'addCritExploiEmpty' has been called !");
        var typeimpact = [];
        TypecritImpact.find().forEach(function(typeCS){
            typeimpact.push(typeCS._id);
        });
        
        var impact = [];
        for(var i = 0 ; i < typeimpact.length; i++){
            var cs = Meteor.call('addcritExploiImpact', typeimpact[i]);
            impact.push(cs);
        }
        return CritExploi.insert({impact : impact, batchAppl : [], createAt: new Date()});
        
   },
   'updateCritExploi' : function(idCExploi, etude){
       console.log("The method 'updateCritExploi' has been called !");
       console.log("\tid critere securite : "+idCExploi);
       console.log("\tEtude : "+etude);

       return CritExploi.update({_id : idCExploi}, {$set : {etude : etude}});
    },
    
    'addBatchToCritExploi' : function(idCExploi, idBatchAppl){
        console.log("The method 'addBatchToCritExploi' has been called !");
        console.log("Id crit Exploi : "+idCExploi);
        console.log("id Batch Appl : "+idBatchAppl);

        var critImpact = CritExploi.findOne({ _id : idCExploi});
        var batchAppli = critImpact.batchAppl;
        var i = batchAppli.indexOf(idBatchAppl);

        if(i == -1){
            batchAppli.push(idBatchAppl);
            CritExploi.update({ _id : idCExploi}, {$set : { batchAppl : batchAppli}});
        }
    },
    'updateBatchToCritExploi' : function(idCExploi, idBatchAppl){
        console.log("The method 'updateBatchToCritExploi' has been called !");
        console.log("Id crit Exploi : "+idCExploi);
        console.log("id Batch Appl : "+idBatchAppl);

        var critImpact = CritExploi.findOne({ _id : idCExploi});
        var batchAppli = critImpact.batchAppl;
        var i = batchAppli.indexOf(idBatchAppl);

        if(i != -1){
            Meteor.call('deleteBatchAppliById', idBatchAppl);
            batchAppli.splice(i,1);
            CritExploi.update({ _id : idCExploi}, {$set : { batchAppl : batchAppli}});
        }
    },
    
   'deleteCritExploi' : function(idCExploi){
       console.log("The method 'deleteCritExploi' has been called !");
       console.log("\tid critere securite : "+idCExploi);
       var critImpact = CritExploi.findOne({ _id :idCExploi});
       
       var impacts = critImpact.impact;
       for(var i = 0 ; i < impacts.length ; i++){
           Meteor.call('deletecritExploiImpact', impacts[i]);
       }
       return CritExploi.remove({_id : idCExploi});
   }
});
